{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Wirecard Payment Gateway",
    "description" : "Wirecard's Payment Gateway enables an individually configurable, smooth, and secure checkout experience in your online shop.\n\nThe Payment Processing API conforms to the design principles of **Re**presentational **S**tate **T**ransfer (REST). Wirecard Payment Gateway provides access to resources (data entities) via URL paths. To use a REST API, your application can do an HTTP request and parse the response. You can find more details on how to integrate via REST API on [https://doc.wirecard.com/RestApi.html](https://doc.wirecard.com/RestApi.html)\n\nBelow you can find typical REST API calls you can do on transactions in our payment gateway. Please keep in mind that a transaction can have different states and depending on the state only specific operations can be used. The diagram below gives you an overview of the most important operations and the order in which they can be used. For example, after a successful *authorization* only a *capture-authorization* or *refund-authorization* is possible.\n\n```\n                  authorization                               purchase\n                        +                                         +\n                        +                                         +\n                        |                                         |\n             +----------++----------+                      +------++------+\n             |                      |                      |              |\n             v                      v                      v              v\n    capture-authorization   refund-authorization    refund-purchase  void-purchase\n             +\n             +\n             |\n      +------++------+\n      |              |\n      v              v\n  void-capture  refund-capture\n```\n\n**Use the following information for each request**\n\nYou have to authenticate via basic authentication to the server by using the following username and password for testing purposes:\n\n**1) Debit via PayPal**\n\nUsername: *16390-testing*\n\nPassword: *3!3013=D3fD8X7*\n\nand use following merchant account id: *8695f3e4-76e8-414b-96cd-a1e5dafcf20c*\n\n**2) Other workflows**\n\nUsername: *70000-APIDEMO-CARD*\n\nPassword: *ohysS0-dvfMx*\n\nand use following merchant account id: *7a6dd74f-06ab-4f3f-a864-adc52687270a*\n\nNote that this combination of username, password and merchant account id (maid) will only work on [api-test.wirecard.com](https://api-test.wirecard.com)\n\nPlease also keep in mind that the parameter request-id has to be a unique GUID for each valid request. You may want to create a random GUID e.g. via [https://www.guidgenerator.com/](https://www.guidgenerator.com/)",
    "termsOfService" : "https://www.wirecard.com/legal-notice",
    "contact" : {
      "name" : "Wirecard AG",
      "url" : "https://www.wirecard.com",
      "email" : "support@wirecard.com"
    },
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Wirecard Payment Gateway: Online Documentation: Integration Guide",
    "url" : "https://doc.wirecard.com"
  },
  "servers" : [ {
    "url" : "https://api-test.wirecard.com/engine/rest",
    "description" : "Wirecard Payment Gateway"
  } ],
  "security" : [ {
    "basicAuth" : [ ]
  } ],
  "paths" : {
    "/payments#capture-authorization" : {
      "post" : {
        "tags" : [ "capture-authorization" ],
        "summary" : "An operation is carried out directly for transaction type 'capture-authorization' and returns a success status if successful. Otherwise an error and an error description is returned.",
        "description" : "***Capture-authorization* with a credit card**\n\nAs a merchant, I want to get the money from a transaction transferred to my bank account.\n\nThe transaction-type *capture-authorization* transfers an authorized amount from the consumer's bank account to the merchant's bank account. When the consumer orders a product, the transaction-type *authorization* reserves the amount of money on the consumer's bank account. The *capture-authorization* transaction type fulfills the actual transfer of the money. It captures either part of or the full authorized amount.\n\nNotice: This process must be initiated in a defined period after a successful *authorization*. The period may vary between different acquirers.\n\n**Preparation steps for *capture-authorization* with a credit card**\n\nEvery *capture-authorization* comes after a successful *authorization*. First you need to create an *authorization*, to which you can refer in the request. You can skip this if you already have an open, successful *authorization* transaction. You can capture either the full amount of the requested-amount from the authorization or capture a part of it. If you capture just a part of it, you can create more requests which refer to the same authorization and capture the rest of the amount.\n\n**1) Steps to get the values you need**\n\n**a.** To get the values for the *capture-authorization*, you have to do the *authorization* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *authorization*. This will be the *parent-transaction-id* in step **2**.\n \n <ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}:  api-test.wirecard.com</li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in step <b>2</b>.</li>\n  <li>Look for the field requested amount – use it for the <i>requested-amount</i> in step <b>2</b>.</li>\n </ol>\n\n**2) Steps to create a *capture-authorization* with a credit card**\n\n**a.** Create a POST request:\n  \n<ol>\n  <li>Send an initial POST request with transaction-type <i>capture-authorization</i> to the Wirecard Payment Gateway. The response body contains the data you sent plus additional status information and the corresponding timestamp. This POST request is secured by basic authentication.</li>\n  <li>Note that it is important that the <i>merchant-account-id</i> and the currency of the <i>requested-amount</i> are the same as in the <i>authorization</i> request.</li>\n</ol>\n\n**b.** If the initial POST request is faulty, the Wirecard Payment Gateway returns an error code with a description of the problem in the response. Return to step **a**. If it is correct, the transaction is completed.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The resource was successfully created or a bad request has been made.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Capture-Authorization"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/payments#refund-capture" : {
      "post" : {
        "tags" : [ "refund-capture" ],
        "summary" : "An operation is carried out directly for transaction type 'refund-capture' and returns a success status if successful. Otherwise an error and an error description is returned.",
        "description" : "***Refund-capture* with a credit card**\n\nAs a merchant, I often have to cancel transactions and want to give consumers a partial or a full refund if they have already paid.\n\nIt is often the case that merchants must withdraw an online shopping process. When the consumer wants to buy a product or service online, Wirecard Payment Gateway initiates a payment process. When merchants withdraw this process, they can stop the process in two ways, either with a void or a refund.\n\nA void is only possible as long as no money transfer has been initiated. As soon as Wirecard Payment Gateway has initiated the payment flow to the acquirer the merchants must return the funds to the consumer via a refund process. A refund can happen after a successful *capture-authorization* or after a successful *purchase*.\n\n*refund-capture*: A *refund-capture* request must reference a successful *capture-authorization* response.\n\nThe refund transaction contains a *parent-transaction-id* that refers to the *transaction-id* of the transaction that shall be refunded.\n\nStep overview:\n<ol>\n  <li>Consumer buys products/services on a merchant’s website.</li>\n  <li>Merchant refunds the transferred money if the funds transfer has been triggered.</li>\n</ol>\n\n**Preparation steps for the *refund-capture* with a credit card**\n\nEvery *refund-capture* comes after a successful *capture-authorization*. First you need to create an *authorization*, and after that you need to create a *capture-authorization*, to which you can refer in the request.\n\n**1) Steps to get the values you need**\n\n**a.** To get the values for the *capture-authorization*, you have to do the *authorization* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *authorization*. This will be the *parent-transaction-id* in step **b**.\n \n <ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}:  api-test.wirecard.com</li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in step <b>b</b>.</li>\n  <li>Look for the field requested amount – use it for the <i>requested-amount</i> in step <b>b</b>.</li>\n </ol>\n\n**b.** To get the values for the *refund-capture*, you have to do the *capture-authorization* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *capture-authorization*. This will be the *parent-transaction-id* in step **2**.\n \n <ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}: api-test.wirecard.com</li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in step <b>2</b>.</li>\n  <li>Look for the field requested amount – if you want to refund just a part of the original amount, use the desired value for the <i>requested-amount</i> field in step <b>2</b>. If you want to refund the whole amount, you don't need to use the <i>requested-amount</i> field.</li>\n </ol>\n\n**2) Steps to create a *refund-capture* with a credit card**\n\n**a.** Create a POST request:\n  \n  <ol>\n    <li>Send an initial POST request with transaction-type <i>refund-capture</i> to the Wirecard Payment Gateway. The response body contains the data you sent plus additional status information and the corresponding timestamp. This POST request is secured by basic authentication.</li>\n  </ol>\n\n**b.** If the initial POST request is faulty, the Wirecard Payment Gateway returns an error code with a description of the problem in the response. Return to step **a**. If it is correct, the transaction is completed.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The resource was successfully created or a bad request has been made.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Refund-Capture"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/payments#refund-purchase" : {
      "post" : {
        "tags" : [ "refund-purchase" ],
        "summary" : "An operation is carried out directly for transaction type 'refund-purchase' and returns a success status if successful. Otherwise an error and an error description is returned.",
        "description" : "***Refund* with a credit card**\n\nAs a merchant, I often have to cancel transactions and want to give consumers a partial or a full refund if they have already paid.\n\nIt is often the case that merchants must withdraw an online shopping process. When the consumer wants to buy a product or service online, Wirecard Payment Gateway initiates a payment process. When merchants withdraw this process, they can stop the process in two ways, either with a void or a refund.\n\nA void is only possible as long as no money transfer has been initiated. As soon as Wirecard Payment Gateway has initiated the payment flow to the acquirer the merchants must return the funds to the consumer via a refund process. A refund can happen after a successful *capture-authorization* or after a successful *purchase*.\n\n*refund-purchase*: A *refund-purchase* request must reference a successful *purchase* response.\n\nThe refund transaction contains a *parent-transaction-id* that refers to the *transaction-id* of the transaction that shall be refunded.\n\nStep overview:\n<ol>\n  <li>Consumer buys products/services on a merchant’s website.</li>\n  <li>Merchant refunds the transferred money if the funds transfer has been triggered.</li>\n</ol>\n\n**Preparation steps for the *refund-purchase* with a credit card**\n\nEvery *refund-purchase* comes after a successful *purchase*. First you need to create a *purchase*, to which you can refer in the request.\n\n**1) Steps to get the values you need**\n\n**a.** To get the values for the *refund-purchase*, you have to do the *purchase* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *purchase*. This will be the *parent-transaction-id* in the step **2**.\n \n<ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}: api-test.wirecard.com  </li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in step <b>2</b>.</li>\n  <li>Look for the field requested amount – if you want to refund just a part of the original amount, use the desired value for the <i>requested-amount</i> field in step <b>2</b>. If you want to refund the whole amount, you don't need to use the <i>requested-amount</i> field.</li>\n</ol>\n\n**2) Steps to create a *refund-purchase* with a credit card**\n\n**a.** Create a POST request:\n  \n<ol>\n  <li>Send an initial POST request with transaction-type <i>refund-purchase</i> to the Wirecard Payment Gateway. The response body contains the data you sent plus additional status information and the corresponding timestamp. This POST request is secured by basic authentication.</li>\n</ol>\n \n**b.** If the initial POST request is faulty, the Wirecard Payment Gateway returns an error code with a description of the problem in the response. Return to step **a**. If it is correct, the transaction is completed.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The resource was successfully created or a bad request has been made.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Refund-Purchase"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/payments#void-authorization" : {
      "post" : {
        "tags" : [ "void-authorization" ],
        "summary" : "An operation is carried out directly for transaction type 'void-authorization' and returns a success status if successful. Otherwise an error and an error description is returned.",
        "description" : "***Void-authorization* with a credit card**\n\nAs a merchant, I want to be able to cancel transactions while the consumer hasn’t paid yet.\n\nIt is often the case that merchants must withdraw an online shopping process. When the consumer wants to buy a product or service online, Wirecard Payment Gateway initiates a payment process. When merchants withdraw this process, they can stop the process in two ways, either with a void or a refund.\n\nA void is only possible as long as no money transfer has been initiated. As soon as Wirecard Payment Gateway has initiated the payment flow to the acquirer the merchants must return the funds to the consumer via a refund process.\n\n*void-authorization*: A *void-authorization*  request must reference a successful *authorization* response.\n\nThe void transaction contains a *parent-transaction-id* that refers to the *transaction-id* of the transaction that shall be voided.\n\nStep overview:\n<ol>\n  <li>Consumer buys products/services on a merchant’s website.</li>\n  <li>Merchant voids the transaction if the funds transfer has not been triggered yet.</li>\n</ol>\n\n**Preparation steps for *void-authorization* with a credit card**\n\nEvery *void-authorization* comes after a successful *authorization*. First you need to create an *authorization*, to which you can refer in the request.\n\n**1) Steps to get the values you need**\n\n**a.** To get the values for the *void-authorization*, you have to do the *authorization* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *authorization*. This will be the *parent-transaction-id* in step **2**.\n  \n<ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}: api-test.wirecard.com</li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in step <b>2</b>.</li>\n</ol>\n\n**2) Steps to create a *void-authorization* with a credit card**\n\n**a.** Create a POST request:\n\n<ol>\n  <li>Send an initial POST request with transaction-type <i>void-authorization</i> to the Wirecard Payment Gateway. The response body contains the data you sent plus additional status information and the corresponding timestamp. This POST request is secured by basic authentication.</li>\n</ol>\n\n**b.** If the initial POST request is faulty, the Wirecard Payment Gateway returns an error code with a description of the problem in the response. Return to step **a**. If it is correct, the transaction is completed.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_3"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The resource was successfully created or a bad request has been made.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Void-Authorization"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/payments#void-capture" : {
      "post" : {
        "tags" : [ "void-capture" ],
        "summary" : "An operation is carried out directly for transaction type 'void-capture' and returns a success status if successful. Otherwise an error and an error description is returned.",
        "description" : "***Void-capture* with a credit card**\n\nAs a merchant, I want to be able to cancel transactions while the consumer hasn’t paid yet.\n\nIt is often the case that merchants must withdraw an online shopping process. When the consumer wants to buy a product or service online, Wirecard Payment Gateway initiates a payment process. When merchants withdraw this process, they can stop the process in two ways, either with a void or a refund.\n\nA void is only possible as long as no money transfer has been initiated. As soon as Wirecard Payment Gateway has initiated the payment flow to the acquirer the merchants must return the funds to the consumer via a refund process.\n\n*void-capture*: A *void-capture* request must reference a successful *capture-authorization* response.\n\nThe void transaction contains a *parent-transaction-id* that refers to the *transaction-id* of the transaction that shall be voided.\n\nStep overview:\n<ol>\n  <li>Consumer buys products/services on a merchant’s website.</li>\n  <li>Merchant voids the transaction if the funds transfer has not been triggered yet.</li>\n</ol>\n\n**Preparation steps for *void-capture* with a credit card**\n\nEvery *void-capture* comes after a successful *capture-authorization*. First you need to create an *authorization*, and after that you need to create a *capture-authorization*, to which you can refer in the request.\n\n**1) Steps to get the values you need**\n\n**a.** To get the values for the *capture-authorization*, you have to do the *authorization* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *authorization*. This will be the *parent-transaction-id* in step **b**.\n\n<ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}: api-test.wirecard.com</li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in step <b>b</b>.</li>\n</ol>\n\n**b.** To get the values for the *void-capture*, you have to do the *capture-authorization* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *capture-authorization*. This will be the *parent-transaction-id* in the step **2**.\n\n<ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}: api-test.wirecard.com</li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in step <b>2</b>.</li>\n</ol>\n\n**2) Steps to create a *void-capture* with a credit card**\n\n**a.** Create a POST request:\n\n<ol>\n  <li>Send an initial POST request with transaction-type <i>void-capture</i> to the Wirecard Payment Gateway. The response body contains the data you sent plus additional status information and the corresponding timestamp. This POST request is secured by basic authentication.</li>\n</ol>\n\n**b.** If the initial POST request is faulty, the Wirecard Payment Gateway returns an error code with a description of the problem in the response. Return to step **a**. If it is correct, the transaction is completed.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_4"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The resource was successfully created or a bad request has been made.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Void-Capture"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/payments#void-purchase" : {
      "post" : {
        "tags" : [ "void-purchase" ],
        "summary" : "An operation is carried out directly for transaction type 'void-purchase' and returns a success status if successful. Otherwise an error and an error description is returned.",
        "description" : "***Void-purchase* with a credit card**\n\nAs a merchant, I want to be able to cancel transactions while the consumer hasn’t paid yet.\n\nIt is often the case that merchants must withdraw an online shopping process. When the consumer wants to buy a product or service online, Wirecard Payment Gateway initiates a payment process. When merchants withdraw this process, they can stop the process in two ways, either with a void or a refund.\n\nA void is only possible as long as no money transfer has been initiated. As soon as Wirecard Payment Gateway has initiated the payment flow to the acquirer the merchants must return the funds to the consumer via a refund process.\n\n*void-purchase*: A *void-purchase* request must reference a successful *purchase* response.\n\nThe void transaction contains a *parent-transaction-id* that refers to the *transaction-id* of the transaction that shall be voided.\n\nStep overview:\n<ol>\n  <li>Consumer buys products/services on a merchant’s website.</li>\n  <li>Merchant voids the transaction if the funds transfer has not been triggered yet.</li>\n</ol>\n\n**Preparation steps for void-purchase with a credit card**\n\nEvery *void-purchase* comes after a successful *purchase*. First you need to create a *purchase*, to which you can refer in the request.\n\n**1) Steps to get the values you need**\n\n**a.** To get the values for the *void-purchase*, you have to do the *purchase* workflow. After the workflow is completed, you can take a look at the transaction in the browser. There you can find the *transaction-id* from the *purchase*. This will be the *parent-transaction-id* in the step **2**.\n \n<ol>\n  <li>Look at the overview of the transaction via: <b>https://{hostname}/engine/rest/merchants/{merchant-account-id}/payments/search?payment.request-id={request-id}</b>\n    <ul>\n      <li>{hostname}: api-test.wirecard.com</li>\n      <li>{merchant-account-id}: Use the appropriate test merchant account id</li>\n      <li>{request-id}: Use the appropriate request id</li>\n    </ul>\n  </li>\n  <li>Look for the field transaction id – this will be the <i>parent-transaction-id</i> in the step <b>2</b>.</li>\n</ol>\n\n**2) Steps to create a *void-purchase* with a credit card**\n\n**a.** Create a POST request:\n\n<ol>\n  <li>Send an initial POST request with transaction-type <i>void-purchase</i> to the Wirecard Payment Gateway. The response body contains the data you sent plus additional status information and the corresponding timestamp. This POST request is secured by basic authentication.</li>\n</ol>\n\n**b.** If the initial POST request is faulty, the Wirecard Payment Gateway returns an error code with a description of the problem in the response. Return to step **a**. If it is correct, the transaction is completed.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_5"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The resource was successfully created or a bad request has been made.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Void-Purchase"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/paymentmethods#debit" : {
      "post" : {
        "tags" : [ "debit" ],
        "summary" : "Creates a payment session for transaction type 'debit' and payment method 'paypal' and returns a redirect URL if successful. Otherwise an error and an error description is returned.",
        "description" : "***Debit* with PayPal**\n\nAs a merchant, I want my consumers to be able to immediately pay via PayPal.\n\nThe transaction-type *debit* transfers an authorized amount from the consumer's PayPal account to the merchant's account.\n\nThe consumer has three hours to finish his payment because the redirect URL expires after three hours. A query for an uncompleted transaction, that has exceeded this period will return a failed transaction.\n\n<ol>\n  <li>The consumer initiates payment.</li>\n  <li>Merchant sends a debit request to Wirecard Payment Gateway.</li>\n  <li>Wirecard Payment Gateway sends a response to the merchant containing the redirect URL to PayPal.</li>\n  <li>Merchant takes the URL from the response.</li>\n  <li>Merchant redirects consumer to this URL (URL can be found in parameter <b><payment-method url=\"URL\" name=\"paypal\"/></b>).</li>\n  <li>Consumer confirms payment on PayPal site.</li>\n  <li>Wirecard Payment Gateway redirects consumer back to merchant’s system URL based on payment result (<b>success-redirect-url</b>, <b>cancel-redirect-url</b>, <b>fail-redirect-url</b> ← defined in MAID configuration or in first request).</li>\n  <li>Wirecard Payment Gateway sends an Instant Payment Notification (IPN) to the merchant’s system after the payment is verified (usually a few seconds).</li>\n</ol>\n\n**Steps to create *debit* with PayPal**\n\n**1) Create a payment session**\n\n<ol>\n  <li>Send an initial POST request with transaction-type <i>debit</i> and the payment-method <i>paypal</i> to the Wirecard Payment Gateway. This POST request is secured by basic authentication. The response body contains the data you sent plus additional status information and the corresponding timestamp.</li>\n</ol>\n\n**2) Redirect the consumer to the Payment Page (initial response URL)**\n\n**a.** For this example: Click ‘Try it out’ and then ‘Execute’ to execute the POST request in\nstep **1**.\n\n**b.** If the POST request is correct, you receive an initial response URL. Use it to redirect your consumer to the payment page (for this example, copy the URL and open it). After that, the consumer can fill out the required fields on the payment page and submit the payment (for this example, input the following test credentials and submit the payment: [https://doc.wirecard.com/PayPal_Main.html#PayPal_TestCredentials](https://doc.wirecard.com/PayPal_Main.html#PayPal_TestCredentials)\n\n**c.** If the POST request is incorrect, an error code is returned in the response. It contains a description of the problem. Return to step **1** and create a new payment session with the right details.\n\n**3) Parse and process the payment response**\n\n**a.** There are three different possible results for the transaction-state after the payment is processed (*successful*, *failed*, and *canceled*). You can redirect the consumer to different pages for each state. In any case (unless the customer cancels the transaction on a 3rd party provider page), a base64 encoded response containing payment information is sent to the configured redirection URL.\n\n**b.** Now, the payment process is complete.\n\n**Use the following test credentials to log in PayPal**\n\nEmail: *paypal.buyer2@wirecard.com*\n\nPassword: *Wirecardbuyer*\n\nYou can find more details about PayPal at [https://doc.wirecard.com/PayPal_Main.html#API_PaymentMethods_PayPal](https://doc.wirecard.com/PayPal_Main.html#API_PaymentMethods_PayPal)\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_6"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Response body </br> A redirect URL to be used for redirecting your consumer to Wirecard Payment Gateway for submitting a payment. If the credentials are valid, the consumer is redirected to a success redirect URL. Otherwise, the consumer is redirected to a fail or cancel redirect URL.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Debit-Response"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Debit-Request" : {
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/DebitRequest_payment"
          }
        }
      },
      "Debit-Response" : {
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "type" : "string",
            "example" : "8695f3e4-76e8-414b-96cd-a1e5dafcf20c"
          },
          "transaction-id" : {
            "type" : "string",
            "example" : "fb2d1140-5787-4704-9b6b-adda699d5fe4"
          },
          "request-id" : {
            "type" : "string",
            "example" : "0556248e-52f8-442c-b392-2964cd6f8bb3"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "debit"
          },
          "transaction-state" : {
            "type" : "string",
            "example" : "success"
          },
          "completion-time-stamp" : {
            "type" : "string",
            "example" : "2020-04-15T09:22:38.000Z"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/DebitResponse_statuses"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "payment-methods" : {
            "$ref" : "#/components/schemas/DebitResponse_paymentmethods"
          },
          "cancel-redirect-url" : {
            "type" : "string",
            "example" : "https://demoshop-test.wirecard.com/demoshop/#/cancel"
          },
          "fail-redirect-url" : {
            "type" : "string",
            "example" : "https://demoshop-test.wirecard.com/demoshop/#/error"
          },
          "success-redirect-url" : {
            "type" : "string",
            "example" : "https://demoshop-test.wirecard.com/demoshop/#/success"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "Capture-Authorization" : {
        "type" : "object",
        "properties" : {
          "self" : {
            "type" : "string",
            "example" : "https://api-test.wirecard.com:443/engine/rest/merchants/7a6dd74f-06ab-4f3f-a864-adc52687270a/payments/09129c43-387a-46a0-a6f7-4feda953e86b",
            "xml" : {
              "attribute" : true
            }
          },
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_merchantaccountid"
          },
          "transaction-id" : {
            "type" : "string",
            "example" : "09129c43-387a-46a0-a6f7-4feda953e86b"
          },
          "request-id" : {
            "type" : "string",
            "example" : "fba99b93-5dda-42cc-9d77-ebafd7db6378"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "capture-authorization"
          },
          "transaction-state" : {
            "type" : "string",
            "example" : "success"
          },
          "completion-time-stamp" : {
            "type" : "string",
            "example" : "2020-04-15T10:07:02.000Z"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/DebitResponse_statuses"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "3226d1ab-cc23-46dd-abdf-c16a1562a03a"
          },
          "account-holder" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_accountholder"
          },
          "card-token" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_cardtoken"
          },
          "payment-methods" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_paymentmethods"
          },
          "parent-transaction-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "authorization-code" : {
            "type" : "string",
            "example" : "889546"
          },
          "api-id" : {
            "type" : "string",
            "example" : "elastic-api"
          },
          "provider-account-id" : {
            "type" : "string",
            "example" : "70010"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "Refund-Capture" : {
        "type" : "object",
        "properties" : {
          "self" : {
            "type" : "string",
            "example" : "https://api-test.wirecard.com:443/engine/rest/merchants/7a6dd74f-06ab-4f3f-a864-adc52687270a/payments/09129c43-387a-46a0-a6f7-4feda953e86b",
            "xml" : {
              "attribute" : true
            }
          },
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_merchantaccountid"
          },
          "transaction-id" : {
            "type" : "string",
            "example" : "208d8dd7-5d86-4e8a-b659-684c44c6c7bd"
          },
          "request-id" : {
            "type" : "string",
            "example" : "41d717b7-c833-48b6-aa5a-9b23bc531a3d"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "refund-capture"
          },
          "transaction-state" : {
            "type" : "string",
            "example" : "success"
          },
          "completion-time-stamp" : {
            "type" : "string",
            "example" : "2020-04-16T07:01:09.000Z"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/DebitResponse_statuses"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "3226d1ab-cc23-46dd-abdf-c16a1562a03a"
          },
          "account-holder" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_accountholder"
          },
          "card-token" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_cardtoken"
          },
          "payment-methods" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_paymentmethods"
          },
          "parent-transaction-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "authorization-code" : {
            "type" : "string",
            "example" : "889546"
          },
          "api-id" : {
            "type" : "string",
            "example" : "elastic-api"
          },
          "provider-account-id" : {
            "type" : "string",
            "example" : "70010"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "Void-Capture" : {
        "type" : "object",
        "properties" : {
          "self" : {
            "type" : "string",
            "example" : "https://api-test.wirecard.com:443/engine/rest/merchants/7a6dd74f-06ab-4f3f-a864-adc52687270a/payments/09129c43-387a-46a0-a6f7-4feda953e86b",
            "xml" : {
              "attribute" : true
            }
          },
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_merchantaccountid"
          },
          "transaction-id" : {
            "type" : "string",
            "example" : "3a65ef80-9c65-4d85-a85b-449f691c401b"
          },
          "request-id" : {
            "type" : "string",
            "example" : "3c0c8137-a22a-4b08-a73e-e98fdb316f8e"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "void-capture"
          },
          "transaction-state" : {
            "type" : "string",
            "example" : "success"
          },
          "completion-time-stamp" : {
            "type" : "string",
            "example" : "2020-04-16T07:01:09.000Z"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/DebitResponse_statuses"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "3226d1ab-cc23-46dd-abdf-c16a1562a03a"
          },
          "account-holder" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_accountholder"
          },
          "card-token" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_cardtoken"
          },
          "payment-methods" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_paymentmethods"
          },
          "parent-transaction-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "authorization-code" : {
            "type" : "string",
            "example" : "889546"
          },
          "api-id" : {
            "type" : "string",
            "example" : "elastic-api"
          },
          "provider-account-id" : {
            "type" : "string",
            "example" : "70010"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "Void-Authorization" : {
        "type" : "object",
        "properties" : {
          "self" : {
            "type" : "string",
            "example" : "https://api-test.wirecard.com:443/engine/rest/merchants/7a6dd74f-06ab-4f3f-a864-adc52687270a/payments/09129c43-387a-46a0-a6f7-4feda953e86b",
            "xml" : {
              "attribute" : true
            }
          },
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_merchantaccountid"
          },
          "transaction-id" : {
            "type" : "string",
            "example" : "289297f8-fe35-4e4e-b993-47b45cba231f"
          },
          "request-id" : {
            "type" : "string",
            "example" : "c7497456-1e6a-49f8-a4f2-3d10360fae1c"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "void-authorization"
          },
          "transaction-state" : {
            "type" : "string",
            "example" : "success"
          },
          "completion-time-stamp" : {
            "type" : "string",
            "example" : "2020-04-16T07:01:09.000Z"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/VoidAuthorization_statuses"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "3226d1ab-cc23-46dd-abdf-c16a1562a03a"
          },
          "account-holder" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_accountholder"
          },
          "card-token" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_cardtoken"
          },
          "payment-methods" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_paymentmethods"
          },
          "parent-transaction-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "authorization-code" : {
            "type" : "string",
            "example" : "889546"
          },
          "api-id" : {
            "type" : "string",
            "example" : "elastic-api"
          },
          "provider-account-id" : {
            "type" : "string",
            "example" : "70010"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "Refund-Purchase" : {
        "type" : "object",
        "properties" : {
          "self" : {
            "type" : "string",
            "example" : "https://api-test.wirecard.com:443/engine/rest/merchants/7a6dd74f-06ab-4f3f-a864-adc52687270a/payments/09129c43-387a-46a0-a6f7-4feda953e86b",
            "xml" : {
              "attribute" : true
            }
          },
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_merchantaccountid"
          },
          "transaction-id" : {
            "type" : "string",
            "example" : "734cb8ae-1bf4-4095-844a-046a2e817935"
          },
          "request-id" : {
            "type" : "string",
            "example" : "68a12cbd-45f8-4053-b99f-c6bfd678cfc7"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "refund-purchase"
          },
          "transaction-state" : {
            "type" : "string",
            "example" : "success"
          },
          "completion-time-stamp" : {
            "type" : "string",
            "example" : "2020-04-16T07:01:09.000Z"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/DebitResponse_statuses"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "3226d1ab-cc23-46dd-abdf-c16a1562a03a"
          },
          "account-holder" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_accountholder"
          },
          "card-token" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_cardtoken"
          },
          "payment-methods" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_paymentmethods"
          },
          "parent-transaction-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "authorization-code" : {
            "type" : "string",
            "example" : "889546"
          },
          "api-id" : {
            "type" : "string",
            "example" : "elastic-api"
          },
          "provider-account-id" : {
            "type" : "string",
            "example" : "70010"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "Void-Purchase" : {
        "type" : "object",
        "properties" : {
          "self" : {
            "type" : "string",
            "example" : "https://api-test.wirecard.com:443/engine/rest/merchants/7a6dd74f-06ab-4f3f-a864-adc52687270a/payments/09129c43-387a-46a0-a6f7-4feda953e86b",
            "xml" : {
              "attribute" : true
            }
          },
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_merchantaccountid"
          },
          "transaction-id" : {
            "type" : "string",
            "example" : "a152ba58-e41f-4ab3-af4b-38e6564b7d28"
          },
          "request-id" : {
            "type" : "string",
            "example" : "11925a24-9c8c-4eca-acb7-bfc857aacc1e"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "void-purchase"
          },
          "transaction-state" : {
            "type" : "string",
            "example" : "success"
          },
          "completion-time-stamp" : {
            "type" : "string",
            "example" : "2020-04-16T07:01:09.000Z"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/DebitResponse_statuses"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "3226d1ab-cc23-46dd-abdf-c16a1562a03a"
          },
          "account-holder" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_accountholder"
          },
          "card-token" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_cardtoken"
          },
          "payment-methods" : {
            "$ref" : "#/components/schemas/CaptureAuthorization_paymentmethods"
          },
          "parent-transaction-amount" : {
            "$ref" : "#/components/schemas/DebitResponse_requestedamount"
          },
          "authorization-code" : {
            "type" : "string",
            "example" : "889546"
          },
          "api-id" : {
            "type" : "string",
            "example" : "elastic-api"
          },
          "provider-account-id" : {
            "type" : "string",
            "example" : "70010"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "Void-Request" : {
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/VoidRequest_payment"
          }
        }
      },
      "Request" : {
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/Request_payment"
          }
        }
      },
      "Unauthorized" : {
        "type" : "object",
        "properties" : {
          "head" : {
            "type" : "object"
          },
          "title" : {
            "type" : "string",
            "example" : "401 Unauthorized"
          },
          "body" : {
            "$ref" : "#/components/schemas/Unauthorized_body"
          }
        },
        "xml" : {
          "name" : "html"
        }
      },
      "Forbidden" : {
        "required" : [ "code", "description" ],
        "type" : "object",
        "properties" : {
          "transaction-state" : {
            "type" : "string",
            "example" : "failed"
          },
          "statuses" : {
            "$ref" : "#/components/schemas/Forbidden_statuses"
          }
        },
        "xml" : {
          "name" : "payment",
          "namespace" : "http://www.elastic-payments.com/schema/payment"
        }
      },
      "paymentscaptureauthorization_payment_merchantaccountid" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "example" : "7a6dd74f-06ab-4f3f-a864-adc52687270a"
          }
        }
      },
      "paymentscaptureauthorization_payment_requestedamount" : {
        "required" : [ "currency", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "example" : "99.90"
          },
          "currency" : {
            "type" : "string",
            "example" : "EUR"
          }
        }
      },
      "paymentscaptureauthorization_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "requested-amount", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string",
            "example" : "c377af32-fb93-4d87-be48-7283ed6d7028"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "capture-authorization"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "ec94742d-47f3-407a-ab9f-693dc5677830"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_requestedamount"
          }
        }
      },
      "body" : {
        "required" : [ "payment" ],
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment"
          }
        }
      },
      "paymentsrefundcapture_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "requested-amount", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string",
            "example" : "00cefd17-b127-4352-9160-db484025ce2b"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "refund-capture"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "e2700e7e-3869-4c73-9439-cf2719e59a34"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_requestedamount"
          }
        }
      },
      "body_1" : {
        "required" : [ "payment" ],
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/paymentsrefundcapture_payment"
          }
        }
      },
      "paymentsrefundpurchase_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "requested-amount", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string",
            "example" : "41820099-cb25-4799-8e48-afdabb1f4222"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "refund-purchase"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "6de49881-63a3-4f05-a4c0-227c5b0b3781"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_requestedamount"
          }
        }
      },
      "body_2" : {
        "required" : [ "payment" ],
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/paymentsrefundpurchase_payment"
          }
        }
      },
      "paymentsvoidauthorization_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string",
            "example" : "77d24ff4-5547-47a2-8734-32f32c910df3"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "void-authorization"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "b5d7385a-3773-4b09-b613-b955a5a10288"
          }
        }
      },
      "body_3" : {
        "required" : [ "payment" ],
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/paymentsvoidauthorization_payment"
          }
        }
      },
      "paymentsvoidcapture_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string",
            "example" : "b6c7f1df-76c3-496f-a4f1-63ccb6b9bcb2"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "void-capture"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "e2700e7e-3869-4c73-9439-cf2719e59a34"
          }
        }
      },
      "body_4" : {
        "required" : [ "payment" ],
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/paymentsvoidcapture_payment"
          }
        }
      },
      "paymentsvoidpurchase_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string",
            "example" : "21ace5da-ac72-4bb4-bffb-32c9e2462491"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "void-purchase"
          },
          "parent-transaction-id" : {
            "type" : "string",
            "example" : "6de49881-63a3-4f05-a4c0-227c5b0b3781"
          }
        }
      },
      "body_5" : {
        "required" : [ "payment" ],
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/paymentsvoidpurchase_payment"
          }
        }
      },
      "paymentmethodsdebit_payment_merchantaccountid" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "example" : "8695f3e4-76e8-414b-96cd-a1e5dafcf20c"
          }
        }
      },
      "paymentmethodsdebit_payment" : {
        "required" : [ "cancel-redirect-url", "fail-redirect-url", "merchant-account-id", "request-id", "requested-amount", "success-redirect-url", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/paymentmethodsdebit_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string",
            "example" : "7ea485fe-3b05-4902-a1b0-37b0e9c39c75"
          },
          "transaction-type" : {
            "type" : "string",
            "example" : "debit"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/paymentscaptureauthorization_payment_requestedamount"
          },
          "success-redirect-url" : {
            "type" : "string",
            "example" : "https://demoshop-test.wirecard.com/demoshop/#/success"
          },
          "fail-redirect-url" : {
            "type" : "string",
            "example" : "https://demoshop-test.wirecard.com/demoshop/#/error"
          },
          "cancel-redirect-url" : {
            "type" : "string",
            "example" : "https://demoshop-test.wirecard.com/demoshop/#/cancel"
          }
        }
      },
      "body_6" : {
        "required" : [ "payment" ],
        "type" : "object",
        "properties" : {
          "payment" : {
            "$ref" : "#/components/schemas/paymentmethodsdebit_payment"
          }
        }
      },
      "DebitRequest_payment_merchantaccountid" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "DebitRequest_payment_requestedamount" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          }
        }
      },
      "DebitRequest_payment" : {
        "required" : [ "cancel-redirect-url", "fail-redirect-url", "merchant-account-id", "request-id", "requested-amount", "success-redirect-url", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/DebitRequest_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string"
          },
          "transaction-type" : {
            "type" : "string"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/DebitRequest_payment_requestedamount"
          },
          "success-redirect-url" : {
            "type" : "string"
          },
          "fail-redirect-url" : {
            "type" : "string"
          },
          "cancel-redirect-url" : {
            "type" : "string"
          }
        }
      },
      "DebitResponse_statuses_status" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "201.0000",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "example" : "The resource was successfully created.",
            "xml" : {
              "attribute" : true
            }
          },
          "severity" : {
            "type" : "string",
            "example" : "information",
            "xml" : {
              "attribute" : true
            }
          }
        }
      },
      "DebitResponse_statuses" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/DebitResponse_statuses_status"
          }
        }
      },
      "DebitResponse_requestedamount" : {
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "example" : "EUR",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "example" : "99.90"
      },
      "DebitResponse_paymentmethods_paymentmethod" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "example" : "https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&amp;useraction=commit&amp;token=EC-9WK62343Y12932238"
          },
          "name" : {
            "type" : "string",
            "example" : "paypal"
          }
        }
      },
      "DebitResponse_paymentmethods" : {
        "type" : "object",
        "properties" : {
          "payment-method" : {
            "$ref" : "#/components/schemas/DebitResponse_paymentmethods_paymentmethod"
          }
        }
      },
      "CaptureAuthorization_merchantaccountid" : {
        "type" : "object",
        "properties" : {
          "ref" : {
            "type" : "string",
            "example" : "https://api-test.wirecard.com:443/engine/rest/config/merchants/7a6dd74f-06ab-4f3f-a864-adc52687270a",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "example" : "[\"7a6dd74f-06ab-4f3f-a864-adc52687270a\"]"
      },
      "CaptureAuthorization_accountholder" : {
        "type" : "object",
        "properties" : {
          "first-name" : {
            "type" : "string",
            "example" : "Jane"
          },
          "last-name" : {
            "type" : "string",
            "example" : "Doe"
          }
        }
      },
      "CaptureAuthorization_cardtoken" : {
        "type" : "object",
        "properties" : {
          "token-id" : {
            "type" : "string",
            "example" : "4242796444090018"
          },
          "masked-account-number" : {
            "type" : "string",
            "example" : "420000******0018"
          }
        }
      },
      "CaptureAuthorization_paymentmethods" : {
        "type" : "object",
        "properties" : {
          "payment-method" : {
            "type" : "string",
            "example" : "creditcard"
          }
        }
      },
      "VoidAuthorization_statuses_status" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "201.0000",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "example" : "The resource was successfully.",
            "xml" : {
              "attribute" : true
            }
          },
          "severity" : {
            "type" : "string",
            "example" : "information",
            "xml" : {
              "attribute" : true
            }
          }
        }
      },
      "VoidAuthorization_statuses" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/VoidAuthorization_statuses_status"
          }
        }
      },
      "VoidRequest_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/DebitRequest_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string"
          },
          "transaction-type" : {
            "type" : "string"
          },
          "parent-transaction-id" : {
            "type" : "string"
          }
        }
      },
      "Request_payment" : {
        "required" : [ "merchant-account-id", "parent-transaction-id", "request-id", "transaction-type" ],
        "type" : "object",
        "properties" : {
          "merchant-account-id" : {
            "$ref" : "#/components/schemas/DebitRequest_payment_merchantaccountid"
          },
          "request-id" : {
            "type" : "string"
          },
          "transaction-type" : {
            "type" : "string"
          },
          "parent-transaction-id" : {
            "type" : "string"
          },
          "requested-amount" : {
            "$ref" : "#/components/schemas/DebitRequest_payment_requestedamount"
          }
        }
      },
      "Unauthorized_body" : {
        "type" : "object",
        "properties" : {
          "h1" : {
            "type" : "string",
            "example" : "Unauthorized"
          }
        }
      },
      "Forbidden_statuses_status" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "403.1166",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "example" : "Access Denied - User doesn‘t have the access for the requested operation!",
            "xml" : {
              "attribute" : true
            }
          },
          "severity" : {
            "type" : "string",
            "example" : "error",
            "xml" : {
              "attribute" : true
            }
          }
        }
      },
      "Forbidden_statuses" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/Forbidden_statuses_status"
          }
        }
      }
    },
    "responses" : {
      "Debit-RequestBody" : {
        "description" : "Request body",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Debit-Request"
            }
          }
        }
      },
      "RequestBody" : {
        "description" : "Request body",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Request"
            }
          }
        }
      },
      "Void-RequestBody" : {
        "description" : "Request body",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Void-Request"
            }
          }
        }
      },
      "Capture-Authorization" : {
        "description" : "The resource was successfully created or a bad request has been made.",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Capture-Authorization"
            }
          }
        }
      },
      "Refund-Capture" : {
        "description" : "The resource was successfully created or a bad request has been made.",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Refund-Capture"
            }
          }
        }
      },
      "Refund-Purchase" : {
        "description" : "The resource was successfully created or a bad request has been made.",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Refund-Purchase"
            }
          }
        }
      },
      "Void-Authorization" : {
        "description" : "The resource was successfully created or a bad request has been made.",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Void-Authorization"
            }
          }
        }
      },
      "Void-Capture" : {
        "description" : "The resource was successfully created or a bad request has been made.",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Void-Capture"
            }
          }
        }
      },
      "Void-Purchase" : {
        "description" : "The resource was successfully created or a bad request has been made.",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Void-Purchase"
            }
          }
        }
      },
      "Debit-Response" : {
        "description" : "Response body </br> A redirect URL to be used for redirecting your consumer to Wirecard Payment Gateway for submitting a payment. If the credentials are valid, the consumer is redirected to a success redirect URL. Otherwise, the consumer is redirected to a fail or cancel redirect URL.",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Debit-Response"
            }
          }
        }
      },
      "Unauthorized" : {
        "description" : "Unauthorized",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Unauthorized"
            }
          }
        }
      },
      "Forbidden" : {
        "description" : "Forbidden",
        "content" : {
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Forbidden"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}