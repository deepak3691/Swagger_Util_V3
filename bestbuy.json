{
  "openapi": "3.0.1",
  "info": {
    "title": "Best Buy API Playground",
    "description": "A sample dataset and API for you to experiment with.",
    "contact": {
      "name": "Best Buy API team",
      "email": "developer@bestbuy.com"
    },
    "version": "1.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:3030/"
    }
  ],
  "tags": [
    {
      "name": "products",
      "description": "Find, create, update and remove products"
    },
    {
      "name": "stores",
      "description": "Find, create, update and remove stores"
    },
    {
      "name": "services",
      "description": "Find, create, update and remove in-store services"
    },
    {
      "name": "categories",
      "description": "Find, create, update and remove product categories"
    },
    {
      "name": "utilities",
      "description": "API application functionality for monitoring version and health information"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "products"
        ],
        "description": "Returns all products that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all products.",
        "operationId": "findProducts",
        "parameters": [
          {
            "name": "$limit",
            "in": "query",
            "description": "Limit the number of products returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skip the specified number of products.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "products"
        ],
        "description": "Creates a new product",
        "operationId": "addProduct",
        "requestBody": {
          "description": "Product to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "product"
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "products"
        ],
        "description": "Returns a product based on an ID,",
        "operationId": "findProductById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of product to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "products"
        ],
        "description": "Deletes a single product based on the ID supplied",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of product to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "products"
        ],
        "description": "Updates a product based on an ID,",
        "operationId": "updateProductById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of product to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Product attributes to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "product"
      }
    },
    "/stores": {
      "get": {
        "tags": [
          "stores"
        ],
        "description": "Returns all stores that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all stores.",
        "operationId": "findStores",
        "parameters": [
          {
            "name": "$limit",
            "in": "query",
            "description": "Limit the number of stores returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skip the specified number of stores.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/store"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "stores"
        ],
        "description": "Creates a new store",
        "operationId": "addStore",
        "requestBody": {
          "description": "Store to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/store"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "store"
      }
    },
    "/stores/{id}": {
      "get": {
        "tags": [
          "stores"
        ],
        "description": "Returns a store based on store ID",
        "operationId": "findStoreById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of store to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/store"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "stores"
        ],
        "description": "Deletes a single store based on the ID supplied",
        "operationId": "deletestore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of store to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "stores"
        ],
        "description": "Updates a store based on store ID",
        "operationId": "updateStoreById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of store to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Store attributes to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/store"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Store response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/store"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "store"
      }
    },
    "/services": {
      "get": {
        "tags": [
          "services"
        ],
        "description": "Returns all services that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all services.",
        "operationId": "findServices",
        "parameters": [
          {
            "name": "$limit",
            "in": "query",
            "description": "Limit the number of services returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skip the specified number of services.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/service"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services"
        ],
        "description": "Creates a new service",
        "operationId": "addService",
        "requestBody": {
          "description": "Service to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "service"
      }
    },
    "/services/{id}": {
      "get": {
        "tags": [
          "services"
        ],
        "description": "Returns a services based on service ID",
        "operationId": "findServiceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of service to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "services"
        ],
        "description": "Deletes a single service based on the ID supplied",
        "operationId": "deleteservice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of service to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service deleted",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "services"
        ],
        "description": "Updates a services based on service ID",
        "operationId": "updateServiceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of service to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Service attributes to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "service"
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "categories"
        ],
        "description": "Returns all categories that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all categories.",
        "operationId": "findCategories",
        "parameters": [
          {
            "name": "$limit",
            "in": "query",
            "description": "Limit the number of categories returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skip the specified number of categories.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "categories"
        ],
        "description": "Creates a new category",
        "operationId": "addCategory",
        "requestBody": {
          "description": "Category to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "category"
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": [
          "categories"
        ],
        "description": "Returns a categories based on category ID",
        "operationId": "findCategoryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of category to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "categories"
        ],
        "description": "Deletes a single category based on the ID supplied",
        "operationId": "deletecategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of category to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "categories"
        ],
        "description": "Updates a categories based on category ID",
        "operationId": "updateCategoryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of category to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Category attributes to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Category response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "category"
      }
    },
    "/version": {
      "get": {
        "tags": [
          "utilities"
        ],
        "description": "Returns the current version of the API Playground being run",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "Version response",
            "content": {}
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "tags": [
          "utilities"
        ],
        "description": "Returns healthcheck information about the system",
        "operationId": "getHealthcheck",
        "responses": {
          "200": {
            "description": "Healthcheck response",
            "content": {}
          },
          "500": {
            "description": "Error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "errorModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer"
          },
          "className": {
            "type": "string"
          },
          "errors": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "product": {
        "title": "Product Schema",
        "required": [
          "description",
          "model",
          "name",
          "type",
          "upc"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "price": {
            "multipleOf": 0.01,
            "type": "number",
            "description": "The Price Of the Product"
          },
          "shipping": {
            "multipleOf": 0.01,
            "type": "number"
          },
          "upc": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "manufacturer": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "model": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "url": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "image": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "store": {
        "title": "Store Schema",
        "required": [
          "address",
          "city",
          "name",
          "state",
          "zip"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "address": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "address2": {
            "maxLength": 30,
            "type": "string"
          },
          "city": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "state": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "zip": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "lat": {
            "type": "number"
          },
          "lng": {
            "type": "number"
          },
          "hours": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "services": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "service": {
        "title": "Service Schema",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "category": {
        "title": "Category Schema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          }
        }
      }
    }
  }
}